Perfect! Let's now build a Mini CRUD Project in Go using MySQL — focused on absolute beginners.
I’ll guide you step by step, with:
✅ Folder structure
✅ Setup & dependencies
✅ .env usage for DB credentials
✅ CRUD logic (Create, Read, Update, Delete)
✅ net/http, mux, MySQL driver usage
✅ Every line explained
✅ Controllers, routes, DB, models — all clearly separated
________________________________________

🧩 Mini CRUD Project — Go + MySQL
📚 Project: Book Manager
A simple REST API to manage a list of books (title, author, rating)
________________________________________

📁 1. Folder Structure
go
CopyEdit
go-crud/
├── controllers/      → Business logic
│   └── book.go
├── db/               → DB connection
│   └── db.go
├── models/           → Data models
│   └── book.go
├── routes/           → Route definitions
│   └── routes.go
├── .env              → Database credentials
├── go.mod
├── go.sum
└── main.go           → Entry point
________________________________________
⚙️ 2. Setup Project
1️⃣ Init Go project
bash

go mod init github.com/satishkumar-yadav/Go-Mini-CRUD-Project
________________________________________
2️⃣ Install Dependencies
bash

go get github.com/gorilla/mux
go get github.com/joho/godotenv
go get github.com/go-sql-driver/mysql

✅ Explanation:
Package	Purpose
mux	Router for defining HTTP routes
godotenv	Load .env file into os.Getenv()
go-sql-driver/mysql	MySQL driver for database/sql
________________________________________

🔐 3. Create .env File
env
CopyEdit
DB_USER=root
DB_PASSWORD=yourpassword
DB_HOST=localhost
DB_PORT=3306
DB_NAME=bookdb
________________________________________

🧠 4. Create db/db.go – MySQL Connection
go

package db

import (
	"database/sql"
	"fmt"
	"log"
	"os"

	_ "github.com/go-sql-driver/mysql"
	"github.com/joho/godotenv"
)

var DB *sql.DB

func Connect() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}

	dsn := fmt.Sprintf(
		"%s:%s@tcp(%s:%s)/%s",
		os.Getenv("DB_USER"),
		os.Getenv("DB_PASSWORD"),
		os.Getenv("DB_HOST"),
		os.Getenv("DB_PORT"),
		os.Getenv("DB_NAME"),
	)

	database, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatal("Error connecting to database: ", err)
	}

	if err := database.Ping(); err != nil {
		log.Fatal("Ping error: ", err)
	}

	log.Println("✅ Connected to MySQL")
	DB = database
}

✅ Explanation:
•	godotenv.Load() loads .env variables into environment
•	sql.Open() prepares connection
•	Ping() confirms DB is alive
________________________________________

📦 5. Define Model — models/book.go
go

package models

type Book struct {
	ID     int    `json:"id"`
	Title  string `json:"title"`
	Author string `json:"author"`
	Rating int    `json:"rating"`
}

✅ This struct represents a row in the books table.
________________________________________

🧠 6. Controller Logic — controllers/book.go
go

package controllers

import (
	"database/sql"
	"encoding/json"
	"go-crud/db"
	"go-crud/models"
	"net/http"
	"strconv"

	"github.com/gorilla/mux"
)

// GET /books
func GetBooks(w http.ResponseWriter, r *http.Request) {
	rows, err := db.DB.Query("SELECT * FROM books")
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	defer rows.Close()

	var books []models.Book
	for rows.Next() {
		var b models.Book
		rows.Scan(&b.ID, &b.Title, &b.Author, &b.Rating)
		books = append(books, b)
	}
	json.NewEncoder(w).Encode(books)
}

// POST /books
func CreateBook(w http.ResponseWriter, r *http.Request) {
	var b models.Book
	json.NewDecoder(r.Body).Decode(&b)

	result, err := db.DB.Exec("INSERT INTO books(title, author, rating) VALUES (?, ?, ?)", b.Title, b.Author, b.Rating)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	lastID, _ := result.LastInsertId()
	b.ID = int(lastID)
	json.NewEncoder(w).Encode(b)
}

// PUT /books/{id}
func UpdateBook(w http.ResponseWriter, r *http.Request) {
	id := mux.Vars(r)["id"]

	var b models.Book
	json.NewDecoder(r.Body).Decode(&b)

	_, err := db.DB.Exec("UPDATE books SET title=?, author=?, rating=? WHERE id=?", b.Title, b.Author, b.Rating, id)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	b.ID, _ = strconv.Atoi(id)
	json.NewEncoder(w).Encode(b)
}

// DELETE /books/{id}
func DeleteBook(w http.ResponseWriter, r *http.Request) {
	id := mux.Vars(r)["id"]

	_, err := db.DB.Exec("DELETE FROM books WHERE id=?", id)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	json.NewEncoder(w).Encode(map[string]string{"message": "Book deleted"})
}

________________________________________
🛣️ 7. Define Routes — routes/routes.go
go

package routes

import (
	"go-crud/controllers"
	"github.com/gorilla/mux"
)

func SetupRoutes() *mux.Router {
	r := mux.NewRouter()

	r.HandleFunc("/books", controllers.GetBooks).Methods("GET")
	r.HandleFunc("/books", controllers.CreateBook).Methods("POST")
	r.HandleFunc("/books/{id}", controllers.UpdateBook).Methods("PUT")
	r.HandleFunc("/books/{id}", controllers.DeleteBook).Methods("DELETE")

	return r
}

________________________________________
🚀 8. Main Entry — main.go
go

package main

import (
	"go-crud/db"
	"go-crud/routes"
	"log"
	"net/http"
)

func main() {
	db.Connect()

	r := routes.SetupRoutes()

	log.Println("🚀 Server running on http://localhost:8080")
	http.ListenAndServe(":8080", r)
}

________________________________________

🛠️ 9. MySQL Table Schema
Before running, create the books table in your MySQL DB:
sql

CREATE DATABASE bookdb;

USE bookdb;

CREATE TABLE books (
  id INT AUTO_INCREMENT PRIMARY KEY,
  title VARCHAR(100),
  author VARCHAR(100),
  rating INT
);
________________________________________

✅ API Endpoints
Method	Endpoint	Description
GET	/books	Get all books
POST	/books	Add a book
PUT	/books/{id}	Update book by ID
DELETE	/books/{id}	Delete book by ID
________________________________________

🧪 Example POST Request (Create)
POST /books
json

{
  "title": "Go in Action",
  "author": "William Kennedy",
  "rating": 5
}
________________________________________

🧾 Recap: What You Learned
•	✅ Project structure for real Go app
•	✅ .env configuration
•	✅ mux, godotenv, sql usage
•	✅ Full CRUD API with REST structure
•	✅ Clear controller → model → route flow
•	✅ All code explained line-by-line for beginners
________________________________________
🧭 Coming Up Next:
Shall I now help you add MongoDB support for the same CRUD project, or build another beginner-friendly Go mini project?
Let me know your next move!

